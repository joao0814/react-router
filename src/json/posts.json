[
    {
        "id": 1,
        "titulo": "Python: Origin of the Name",
    "texto": "> Source: <https://www.alura.com.br/artigos/python-origem-do-nome> \n\n Why is one of the most beloved programming languages in the world called that, and what is its origin? Does it have anything to do with a type of snake? Find out this and much more in this article! \n\n ### A bit of history \n\n [Guido Van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) created [Python](https://www.alura.com.br/cursos-online-programacao/python) in 1989. He worked at the [Centrum Voor Wiskunde en Informatica](https://www.cwi.nl/) in the early 1980s, and his job was to implement the programming language known as [ABC](https://en.wikipedia.org/wiki/ABC_(programming_language)).  \n\n In the late 1980s, while still at CWI, he began looking for a scripting language with syntax similar to ABC but with access to [Amoeba](https://en.wikipedia.org/wiki/Amoeba_(operating_system)) system calls. After searching and failing to find any language that met his needs, Rossum decided to design a simple scripting language that could overcome ABC's shortcomings.  \n\n By the end of the 1980s, Rossum started developing the new script, and in 1991, he released the initial version of the programming language. This first version had a [Modula-3](https://en.wikipedia.org/wiki/Modula-3) style module system, and the language was later named “Python.” \n\n ### Okay, but where does the name come from? \n\n Many people tend to think that the name Python comes from a type of snake, since Python’s logo depicts a blue and yellow snake. \n\n ![gif of the Python programming language logo](/assets/posts/1/gif-1.gif)  \n\n However, the real story behind the name is a bit different.  \n\n In the 1970s, the BBC had a popular TV show that Van Rossum was a big fan of called [Monty Python’s Flying Circus](https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus), or just Monty Python for short.  \n\n So, when he was developing the language, he thought he needed a name that was short, unique, and a little mysterious — and for reasons only he knew, he decided to call the project ‘Python’. \n\n ![man leaving a shop](/assets/posts/1/gif-2.gif) \n\n And if you were to create your own programming language, what name would you give it? Would you pay tribute to your favorite show, game, or movie? \n\n In our [Python course](https://www.alura.com.br/cursos-online-programacao/python), which is a complete training program, we also explore other fun facts about the language and its history, as the community is strong and makes important decisions. \n\n ### Conclusion \n\n Today, [Python is a worldwide trend among developers](https://blog.revelo.com.br/desenvolvedores-python-estao-em-alta-no-mercado/) since it can be applied in various scenarios, such as Data Science, web applications, Back-End development, game creation, and scripting. \n\n Want to learn more about Python? Check out: \n\n - [Python from scratch – Training in the most loved language of the moment](https://www.alura.com.br/formacao-Python-linguagem) \n\n - [Python for Web – Django Training](https://www.alura.com.br/formacao-django) \n\n - [API with Python – Django Rest Framework Course](https://www.alura.com.br/curso-online-api-django-3-rest-framework) \n\n - [TDD with Python – Test-Driven Development](https://cursos.alura.com.br/course/tdd-django-3-testes) \n\n - [Pacman with Python – Creating a game with Pygame](https://www.alura.com.br/curso-online-python-pygame-pacman-colisao-pontuacao) \n\n "
    },
    {
        "id": 2,
        "titulo": "What is Node?",
        "texto": "> Source: <https://www.alura.com.br/artigos/node-js-definicao-caracteristicas-vantagens-usos> \n\n  ### Introduction \n\n Node.js is a widely used tool in the development world, and everyone working in technology has heard of it — if only through countless course ads or job listings. But you might be wondering: what exactly is Node.js? What is it for? How does it work? \n\n Before diving into the Node.js environment, we need to first understand what JavaScript is and how it works. Let’s go! \n\n ### Node.js and JavaScript \n\n JavaScript is a programming language originally developed to bring greater interactivity to **websites** by manipulating the *DOM* (Document Object Model). Let’s check the definition from the reference book **Eloquent JavaScript**: \n\n > JavaScript was introduced in 1995 as a way to add dynamism to web pages in the Netscape Navigator browser. Since then, the language has been adopted by all other major graphical web browsers. It made modern web applications possible — applications you can interact with directly without reloading the page after each action. JavaScript is also used in more traditional websites to provide various forms of interactivity more intelligently. \n\n > Source: [Free translation of the book Eloquent JavaScript](https://eloquentjavascript.net/00_intro.html) \n\n In short, we can understand that **JavaScript** was designed to be fast, dynamic, and accessible. Being an *interpreted language*, it allows you to launch or work on your applications without setting up a complex environment. \n\n These characteristics motivated software engineer Ryan Dahl to develop an environment — like a program you install on your computer — that runs JavaScript outside the browser, on the server side, via the terminal, in a less restrictive way. \n\n ### Alright, but what about Node.js? \n\n JavaScript was born to serve Front-End demands, and as needs grew alongside technological advancements, the idea emerged to use the same language on both client and server sides to optimize processes and services. This is how Node.js appeared as a viable alternative for Back-End programming, being an environment for development using the JavaScript language. \n\n According to its official definition, Node is a **runtime**, which is essentially a set of code, APIs — that is, libraries responsible for execution time (what makes your program run) — that works as a JavaScript interpreter outside the **web browser** environment. \n\n It’s important to note that Node.js is an asynchronous runtime, meaning it works in a way that doesn’t block application execution, delegating long-running processes to the background. \n\n It works very well with **single-threaded** server architectures, meaning all requests to the server are executed in the same thread instead of separate processes. One of the main advantages of the Node.js–JavaScript combination is its great performance in API usage, since JavaScript makes heavy use of asynchronous APIs. \n\n You might be thinking: “Okay, I understand what Node.js is and its advantage when used with JavaScript, but what does this mean?” Let’s explore further… \n\n #### How Node.js works \n\n **Node can interpret JavaScript code**, just like the browser does. So, when the browser receives a JavaScript command, it interprets it and then executes the given instructions. \n\n Node is fantastic (totally “unbiased” here, I swear!) because it allows you to send instructions (our code) without needing an active browser — just have Node.js installed and use the terminal to run a JavaScript program. \n\n Plus, you can use just one programming language to handle requests between client and server. Pretty amazing, right? \n\n To make all of this possible outside the browser, Node uses another tool called **Chrome's V8 JavaScript Engine.** This Chrome V8 engine compiles and runs JavaScript code instead of merely interpreting it. \n\n Still sounds confusing? Let me explain further… \n\n Google’s V8 engine is the core — the heart that processes all JavaScript code in the browser so your machine can understand it and provide the resources and interactions. It’s only possible to view JavaScript pages or work with code via Node.js because of Chrome’s V8 engine processing. \n\n Thanks to its JavaScript core and Google’s V8 engine, Node.js has some characteristics that, depending on the scenario, can be considered *advantages* of the platform. Let’s take a look: \n\n ### Node.js features \n\n Node.js can be used in famous REST APIs, web scraping, chatbots, IoT, web servers, desktop applications — all thanks to its highly versatile nature. Its main characteristics include: \n\n - **Cross-platform:** allows you to create everything from desktop apps to mobile apps and even SaaS websites. \n - **Multi-paradigm:** you can program in different paradigms, such as Object-Oriented, functional, imperative, and event-driven. \n - **Open Source:** it’s an open-source platform, meaning you can access Node.js’s source code and make your own customizations or contribute directly to the community. \n - **Scalable:** Node.js was created to build scalable web applications, as stated in its [official documentation](https://nodejs.org/en/about/). \n\n Node.js also has a relatively smaller learning curve compared to other Back-End languages and a massive community willing to help. Without a doubt, this combination is Node.js’s **superpower**. \n\n ### Companies using Node.js \n\n Alright, we’ve talked about Node.js’s many qualities, but in practice… where can you work with it? \n\n Because of Node.js’s *superpowers*, many giants in the market work directly with the platform in their business rules. Here’s a small list: \n\n - **Netflix:** replaced its Java-based renderer with a JavaScript one using Node.js to reduce user request wait times, achieving around a one-minute reduction. \n - **IBM:** created The Canary in the Gold Mine (CITGM), a testing utility widely used by the company. \n - **LinkedIn:** the **mobile** app of the largest professional network is built in Node and HTML5 — you can read the full article [here](https://venturebeat.com/2011/08/16/linkedin-node/). \n - **Uber:** the user–driver relationship system was built in Node.js for its fast response times. \n\n And… believe it or not! Node.js was even used by **NASA** to create an API that integrates three databases into one, precisely to optimize data access. [Node.js helps NASA keep astronauts safe and data accessible – **in English**](https://openjsf.org/wp-content/uploads/sites/84/2020/02/Case_Study-Node.js-NASA.pdf) \n\n Node.js is really taking off! \n\n ### My first Node.js code \n\n To run the platform on your machine, you need to install Node.js. If you haven’t yet, follow the tutorial [**Installing Node.js on Windows and Linux**](https://www.alura.com.br/artigos/instalando-nodejs-no-windows-e-linux#:~:text=Ap%C3%B3s%20baixar%20o%20instalador%2C%20basta,gostaria%20de%20instalar%20outras%20ferramentas.). \n\n Then get your hands on some code. \n\n The classic “Hello World!” for good luck: \n\n ```js\n console.log('Hello, World!')\n ``` \n\n And now you can start your first server: \n\n ```js\n const http = require('http');\n\n const server = http.createServer(function (req, res) {\n   res.writeHead(200, {'Content-type': 'text/html'});\n   res.end('Hello Node!');\n });\n\n server.listen(3000);\n\n console.log('Server running. Access: localhost:3000');\n ``` \n\n Remember, the code here is in line with the latest stable version — the LTS (Long-Term Support) version. But Node has introduced a very cool feature in its new version. Check out the article [**Revolution in Node.js: Goodbye Axios and Node-fetch in version 17.5.0**](https://www.alura.com.br/artigos/revolucao-node-js-adeus-axios-fetch-api-versao-17-5-0). \n\n Now it’s time to celebrate and deepen your Node.js studies!"
    },
    
    {
        "id": 3,
        "titulo": "What is JWT?",
        "texto": "> Source: <https://www.alura.com.br/artigos/o-que-e-json-web-tokens> \n\n Have you ever attended an event where you had to present an **identification document** to prove that you were indeed the person who purchased the ticket? Requesting the ID is a form of **authentication** so you can receive **authorization** to enter. On the web, this process works in a similar way. To make requests to certain services or access specific pages, you need to identify yourself in some way, and that identification must be secure and unique.  \n\n In this article, you will understand what the JWT standard (short for “JSON Web Tokens”) is for authentication, widely used on the web. We will also cover: \n\n - What a token is; \n- What a JWT is used for and when to use it; \n- How to create and verify your JWT token. \n\n ### What is a token? \n\n These days, we often hear the word “token” related to NFTs (“Non-Fungible Tokens”), the metaverse, cryptocurrencies, etc. However, outside of that context, a token is a **digital signature**, **a key**. \n\n When you open a bank account, you must set a password and provide your personal information. This data is converted into a digital signature that uniquely identifies you for that bank. Every time you log in with your password and personal data, the bank will understand and **confirm** that you are the logged-in user — just like entering an event after showing your ID. \n\n There are various algorithms and standards that transform your information into a token — a unique authentication key — that makes sense to the service or application you’re trying to access. One such standard is JWT, which is secure because it allows authentication between two parties through a **signed token**. \n\n ### What is JWT? \n\n A JWT is a standard for authentication and information exchange defined by [RFC7519](https://datatracker.ietf.org/doc/html/rfc7519). It allows you to securely and compactly store [JSON objects](https://www.alura.com.br/artigos/o-que-e-json). This token is a Base64-encoded string and can be signed using a secret or a private/public key pair. \n\n Signed tokens can verify the integrity of the information they contain, unlike encrypted tokens, which hide the information. If a JWT is signed by a private/public key pair, the **signature** certifies that the party holding the private key is indeed the one who signed it. \n\n #### When and where can I use a JWT? \n\n You can use it, for example, in an **authorization** scenario. Once a user is logged in, you can check each request to see if it includes the JWT, allowing the user to access routes, services, and other resources. \n\n Another JWT use case is **information exchange**. Since they are signed, you can be certain that the senders are who they claim to be. Additionally, you can detect whether the signature content has been altered, thanks to the JWT structure. \n\n #### How did JWT come about? \n\n It is part of a family of specifications called JOSE. \n\n JOSE stands for **JSON Object Signing and Encryption**. JWT belongs to this family and represents the token. Here are the other specifications: \n\n - JWT (JSON Web Token): represents the token itself; \n- JWS (JSON Web Signature): represents the token’s signature; \n- JWE (JSON Web Encryption): represents the encrypted token; \n- JWK (JSON Web Keys): represents the keys used for signing; \n- JWA (JSON Web Algorithms): represents the algorithms used for signing the token. \n\n Now that you know what JWT is, what it’s for, and when to use it, let’s look deeper at how it works and its components. \n\n ### Basic components of a JSON Web Token \n\n A JWT has a basic structure consisting of the _header_, _payload_, and _signature_. These three parts are separated by dots (`.`). The format looks like this: `header.payload.signature`. Let’s understand each part: \n\n #### Header \n\n The header contains two pieces of information: `alg`, which specifies the algorithm used to sign the token, and `typ`, which indicates the token type. \n\n ```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n ``` \n\n #### Payload \n\n The payload contains authentication-related data, such as email and password. \n\n ```json\n{\n  \"email\": \"name@alura.com.br\",\n  \"password\": \"HuEKW489!j445*\"\n}\n ``` \n\n #### Signature \n\n The signature is composed of the encoded header and payload combined with a secret key and generated using the algorithm specified in the header. \n\n ```\nHS256SHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n  secret_key\n)\n ``` \n\n The result is three strings separated by dots, which can be easily used in HTML environments and HTTP protocols. \n\n ```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.\nSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n ``` \n\n Now that we understand the inner structure of a JWT, let’s create our own JSON Web Token! \n\n ### Creating a JWT token \n\n First, create a folder called `jwt` in your desired directory. Create a JavaScript file with any name (here, `index.js`). Install the `jwt` library of your choice. There are many libraries for generating JWTs. We’ll use [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken), one of the most popular, but feel free to explore others. \n\n Import the library: \n\n ```js\nconst jwt = require('jsonwebtoken');\n ``` \n\n Create your secret key — only you should know it, and it should be hard to guess to prevent malicious attacks: \n\n ```js\nconst secretKey = 'skljaksdj9983498327453lsldkjf';\n ``` \n\n Create the token using the `sign` method, which accepts the payload, secret key, and header (in that order): \n\n ```js\nconst myToken = jwt.sign(\n  {\n    email: 'name@alura.com.br',\n    password: 'HuEKW489!j445*',\n  },\n  secretKey,\n  {\n    expiresIn: '1y',\n    subject: '1',\n  }\n);\n ``` \n\n In this JWT, the payload includes email and password; the header includes a **subject** (used here as an ID); and the token expires in 1 year. By default, the encoding algorithm is HS256. \n\n Use **Nodemon** to see the result in the terminal — install it from [here](https://www.npmjs.com/package/nodemon). Nodemon restarts your Node.js app automatically when file changes are detected. \n\n ```js\nconsole.log(myToken);\n ``` \n\n Example output: \n\n ```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A\n ``` \n\n ### Verifying our JWT \n\n To verify the token, use the `decode` method from [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken): \n\n ```js\nconst generatedToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im5vbWVAYWx1cmEuY29tLmJyIiwicGFzc3dvcmQiOiJIdUVLVzQ4OSFqNDQ1KiIsImlhdCI6MTY1MTY4MzUxNywiZXhwIjoxNjgzMjQxMTE3LCJzdWIiOiIxIn0.t0UuIAxJ1NPXANtlBOKfHfLsePF4LRPu4RA2WMkJl6A';\n\nconsole.log(jwt.decode(generatedToken));\n ``` \n\n Output: \n\n ```json\n{\n  \"email\": \"name@alura.com.br\",\n  \"password\": \"HuEKW489!j445*\",\n  \"iat\": 1651683517,\n  \"exp\": 1683241117,\n  \"sub\": \"1\"\n}\n ``` \n\n Here, `iat`, `exp`, and `sub` are the creation date, expiration date (both in UTC), and the subject we defined in the code. Another option for verifying a token is using [https://jwt.io/](https://jwt.io/). Just paste the generated token, and you’ll see the decoded information. \n\n ### Authentication with tokens \n\n Imagine you’re developing a banking app’s front-end. On the login page, you collect user data and send it to an API using fetch or axios: \n\n ```js\nfetch(`${baseUrl}/auth/login`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: user,\n})\n.then((response) => {\n  // something\n})\n.catch((error) => {\n  // something\n});\n ``` \n\n The server processes the data and returns a token identifying the user. Every time this user logs in, they will be **authenticated** and, if valid, **authorized** to access specific areas like checking their account balance. Token generation is usually handled by the back-end, but you must ensure the logged-in user can keep accessing other areas of the app. \n\n You can store the token in the browser’s session storage or local storage to keep the user logged in until it expires. After login, redirect them to a Home page with other features. \n\n When the user tries to access the balance page, for example, you can make a request with axios or fetch, passing the “Authorization” header with the token: \n\n ```js\nfetch(`${baseUrl}/saldo`, {\n  headers: {\n    'Authorization': token,\n  },\n})\n.then((response) => {\n  // something\n})\n.catch((error) => {\n  // something\n});\n ``` \n\n On logout, redirect the user elsewhere, and when the token expires, redirect them to the login page again. \n\n ### Conclusion \n\n Pretty cool, right? \n\n In this article, you learned what JSON Web Tokens are, their purpose, components, and how to use them in your applications. You also saw how to use tokens in a front-end app for user authentication. \n\n At Alura, we have a spectacular [Next.js training program](https://cursos.alura.com.br/formacao-next-js)! You can apply your JWT knowledge in a real project in the course **[Next.js: Authentication and Token Management](https://cursos.alura.com.br/course/nextjs-autenticacao-gerenciamento-tokens)**.\n"
    },
    
    {
        "id": 4,
        "titulo": "What is a 2D Sprite?",
        "texto": "> Source: <https://www.alura.com.br/artigos/sprite-como-funciona-em-jogos-2d> \n\n ## What is a sprite? \n\n In games, it’s common to see many characters, moving objects, backgrounds, and lots of activity happening on the screen. All of these elements are also known as **sprites**. In this article, we will focus on 2D sprites and how animations are made. \n\n A sprite is a two-dimensional image or graphic object in a game, which can be either a character or objects added to a background. Below is an image of a scene with a sprite from one of the greatest 2D games of all time: \n\n For characters, imagine you want to create their movements in your game, such as raising hands, running, jumping, among others. In this case, the sprite refers to the character, and for each of these movements, you must create sprite variations. In short, the idea is to draw each movement, as in the example below. This is similar to creating an animation for a video using a sequence of hand-drawn frames. \n\n The term `sprite` gained notoriety in the gaming world during the 1970s and 1980s, especially in consoles such as Atari VCS (1977), ColecoVision (1982), Nintendo Entertainment System (1983), and Sega Genesis (1988). \n\n #### Sprites today  \n\n As computer performance improved with advances in hardware and software, video games evolved into 3D. However, the use of 2D elements is still very common and celebrated in the gaming world. \n\n We can find excellent 2D games on modern consoles, with beautiful graphics and various design elements with a wide color palette. \n\n Here are some examples: \n\n * **Cuphead** is a 2D run-and-gun game that strongly resembles 1990s platformers, but with extremely detailed graphics and great gameplay. Another nod to vintage games is its stage navigation system via a map in the style of *Super Mario World*. \n\n * **Ori and the Blind Forest** is another 2D platform game with an impressive visual style, featuring a protagonist destined for heroic feats. \n\n * **Limbo** is another great platform game. Although not colorful like the previous examples, it features stunning landscapes, bizarre characters, and eerie sounds. The game takes place in a completely dark and gray setting, as it portrays a gloomy and dangerous world. \n\n ### Conclusion \n\n A sprite is a character or object within 2D games. To create the illusion of movement, multiple different sprites with small variations of the same character are required. Sprites became especially popular in the 1970s and 1980s with the rise of 2D video games. Later, even with the advent of 3D thanks to hardware and software advancements, 2D sprites have remained widely used in modern games. \n\n Now that you know a bit more about sprites and how they work, how about recreating two classic games with JavaScript? We have two programming courses that will show you how to recreate these games from scratch: \n\n - [Classic Games Part 1: Getting started with JavaScript using the Pong game](https://www.alura.com.br/curso-online-pong-javascript) \n\n - [Classic Games Part 2: Learn how to create the classic Freeway game](https://www.alura.com.br/curso-online-javascript-listas-lacos) \n\n You can also join Alura’s GAME DEV immersion through the link: \n\n - [GAME DEV Immersion](https://cursos.alura.com.br/imersoes/aulas/aula-1-animacoes-basicas-e-trilha-sonora-c28) \n\n And here’s my thanks to you for reading this far and learning a bit more about this wonderful world of technology. Cheers!\n"
    },
    
    {
        "id": 5,
        "titulo": "CSS Variables",
        "texto": "> Source: <https://www.alura.com.br/artigos/construa-css-magico-variaveis-nativas>\n\nProbably, when building a website, you have noticed that many values in CSS files are repeatedly used, right? For example, the color palette that maintains the page's visual standard is reused in numerous parts of the code. Therefore, maintaining the project and manually changing these values can become a tedious and error-prone task, especially in large-scale applications.\n\nSo, how can we improve this situation?\n\nA good alternative is to use **CSS Variables** as allies!\n\nIf you are interested and want to learn how to do this, come along because in this article I will teach you more about this topic in detail.\n\n## But first, what are CSS Variables?\n\nCSS variables, also called custom properties, bring great benefits and work very similarly to variables in programming languages, meaning their main function is to store values that will be used later in the code.\n\nThey allow creating values for all CSS properties, being widely used to manage colors, fonts, animation values, etc.\n\n## How to use CSS Variables?\n\nCSS variables have access to the DOM, which allows them to be declared globally or locally. Also, they have a characteristic syntax that we already got a small preview of in the image above. Shall we understand better how it works?\n\n### Syntax\n\nDeclaring or creating a variable in a CSS file consists of 4 parts, as follows:\n\n- **1st:** Two hyphens (--)\n\n- **2nd:** Variable name\n\n- **3rd:** Colon (:)\n\n- **4th:** Variable value\n\nIt is important to highlight that some characters are not allowed in the naming, such as: ; # } ] ) etc.\n\nApplying variables inside an HTML element on a certain CSS property is done through the association between the `var()` function and the variable name, which is passed as a parameter inside the parentheses. Like this:\n\n```\nbody {\n  background: var(--global-primary-color);\n}\n```\n\n### Global declaration\n\nWe do this by declaring the variable inside the `:root` pseudo-class. This selector corresponds to the root, it is the same as `<html>` itself but has higher specificity. Through root, we make them globally available to be used anywhere in the document.\n\n### Local declaration\n\nFor this, we declare the variable inside the selector that will use it. Thus, they will be restricted to the scope where they were declared and inherited only by child elements.\n\n## Where did it come from?\n\nVariables have been a highly requested feature for many years. This is because previously this solution was only possible through preprocessors like Sass, Stylus, or through CSS in JS. These tools act as great partners, but there were still some gaps that only CSS variables have filled.\n\nThe main point to highlight is that preprocessor variables are static and require a compilation step. That is, all functions, mixins, and interpolations in Sass return pure CSS to be interpreted by the browser.\n\nCSS variables, on the other hand, work at runtime, are dynamic, and operate independently of the technologies used, working in any context without additional steps.\n\nMoreover, there are other limitations with preprocessor variables, such as the inability to use variables via @extend in media queries, lack of inheritance and cascading effect on elements, and since they don’t have DOM access, they can’t be controlled via JavaScript.\n\n## What are the main advantages of using them?\n\n### Clear code\n\nAfter all, reading `--main-border-color` is much more semantic than reading #B4E197, where we can quickly understand what it is about.\n\n### Easier maintenance\n\nYou can change the stylesheet in many places just by changing the variable value in one single place, which saves time and avoids possible typos.\n\n### Theme creation\n\nWith variables, you can easily create and edit your style guides or build themes more easily. A classic example is creating light/dark modes, and since CSS variables are dynamic and have access to the DOM, you can have greater control via JavaScript manipulation. Check out a practical example in this [Alura+ Dark Mode](https://cursos.alura.com.br/extra/alura-mais/dark-mode-um-projeto-em-html-css-c1369).\n\n## Extra content\n\n### CSS Cascade\n\nThey benefit from the CSS cascade, where we can assign a new value to a variable so that child elements inherit the characteristics of their closest parent element.\n\n### Relation with @media query\n\nCurrently, we still cannot use variables as screen resolution measurements inside @media queries, like this:\n\n```\n:root {\n  --sm: 640px;\n}\n\n@media (max-width: var(--sm)) {\n  ...\n}\n```\n\nIt is still necessary to use fixed measures, but inside media queries, it is possible to apply variables without any problem.\n\n```\n:root {\n  --color-text-desktop: red;\n  --color-text-mobile: blue;\n}\n\nh1 {\n  color: var(--color-text-desktop);\n}\n\n@media (max-width: 640px) {\n  h1 {\n    color: var(--color-text-mobile);\n  }\n}\n```\n\n### Browser support\n\nAccording to [Can I use](https://caniuse.com/?search=variables), regarding browser support, variables are compatible with almost all modern browsers in a satisfactory way.\n\n## Now it’s your turn!\n\nIn this article, we learned about the power of using CSS variables in a project, better understood their concepts, advantages, and application.\n\nTo dive deeper into [front-end development](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end), enrich your portfolio, and apply CSS variables in many amazing projects, don’t miss out on the courses in the [front-end formation](https://www.alura.com.br/formacao-front-end).\n\nNow tell me, did you already use variables in your development routine? If so, I invite you to share your impressions with us here in the forum or on Alura’s Discord. And if you had never heard of this or if this content helped you in some way, please leave your feedback — your opinion is very valuable to us and helps us improve and provide you with an ever better learning experience.\n\nSee you next time and happy studying!\n"
    },

    {
        "id": 6,
        "titulo": "Main Front-end Communities",
        "texto": "> Source: <https://www.alura.com.br/artigos/principais-comunidades-front-end> \n\n When we enter the technology field, it’s like discovering a completely new world. And on this journey, you might feel alone and lost. So, to show you that you’re not the only one on this path, I’m bringing you some [front-end](https://www.alura.com.br/artigos/o-que-e-front-end-e-back-end) communities to get to know and join. \n\n ## What is a community? \n\n A community is a group of people who come together to exchange ideas, share experiences, and create events (such as talks and workshops, which can be in-person or online). In these groups, many topics are discussed, mainly about the main market demands and current trends. \n\n These spaces are known for offering great support, which is amazing for those just starting out in a dev career. You’ll find everyone there, from beginners to the most experienced, all willing to help with any questions. The fact is, someone before you might have had similar questions, and in these groups, you can find solutions quickly. \n\n Also, you can stay informed about best practices, news, get feedback, meet new people, and connect with them. By the way, networking is important in any field because connecting with different kinds of people helps you grow not only professionally but also personally. \n\n There are many communities for developers out there. So, in this article, I’ll bring the main communities focused on Front-end. \n\n Let’s go? \n\n ## Front-end Communities to Join \n\n### Stack Overflow \n\n [Stack Overflow](https://pt.stackoverflow.com/) is a Q&A site dedicated to people who already program or want to learn to program. The community constantly asks and answers questions, and users vote on the best ones so they rise in the feed and become easier to find. There are many questions in English, but if you want, you can go to the section where everything is in Portuguese. Cool, right? \n\n You also gain reputation when you vote on questions and answers. At higher levels, you gain privileges like moderation permissions and start helping to maintain the quality of the site and community. \n\n ### GitHub \n\n GitHub is a platform where you share your code and files with version control using Git. It’s like a social network for programmers. So, you can follow people, exchange messages, and contribute to private or [Open Source](https://www.alura.com.br/artigos/open-source-uma-breve-introducao) projects. \n\n Although GitHub has many interactions in English, I’ll bring here a wonderful option in Portuguese. \n\n On the platform, there is an amazing forum called [Front-end Brasil](https://github.com/frontendbr). It was created to gather questions from other social networks, like Facebook, that got lost over time. In other words, the creators of this space wanted to unify all discussions in one place and chose GitHub because it’s easier to find old questions. \n\n On the main page, there are links to the forum, job postings in Front-end, and events. The coolest thing is anyone can add a job, create an event, or make suggestions, as long as it follows the site’s guidelines, of course. \n\n ### MDN Web Docs \n\n [MDN Web Docs](https://developer.mozilla.org/pt-BR/) is an open-source collaborative project documenting Web platform technologies like HTML, CSS, JavaScript, and Web APIs. They also provide a large collection of learning resources for devs and beginners, such as a [learning path](https://developer.mozilla.org/pt-BR/docs/Learn/Front-end_web_developer) for front-end development, which you can access in English or Portuguese. Great, right? \n\n In this area, MDN aims to take you from beginner to comfortable, so you can build your path in programming from that basic knowledge. And if you have questions or get stuck, they also offer a forum where you can post your question and get help from others. \n\n ### Coderwall \n\n [Coderwall](https://coderwall.com/t/web/popular) is a dev community for learning and sharing programming tips. There is a tips section to help solve problems or learn new things, organized by tags. You can search for “front-end,” for example, and find everything related to the topic. \n\n Besides having many resources for beginners and experienced devs, there are exclusive areas for JavaScript, CSS, HTML, Python, Ruby, iOS, and many other topics where you have full freedom to ask questions or post tips. \n\n An important point is that most content is in English, but this shouldn’t be a barrier since you can use translation tools if you want, like [Google Translate](https://translate.google.com.br/?hl=pt-BR) or [DeepL](https://www.deepl.com/translator). \n\n ### WoMakersCode \n\n [WoMakersCode](https://www.linkedin.com/company/womakerscode/) has the mission to inspire and empower girls and women who want to enter or specialize in technology and innovation careers. It is an organization that creates many initiatives for training, mentoring, employability, and digital content. So, if you’re a woman who feels alone in this area, where men are still the majority, you have the chance to connect with other women and learn a lot from them. \n\n The organization also offers many talks, workshops, and job fairs you can sign up for online and free via [this link](https://linktr.ee/womakerscode). And check this out: if you want, you can volunteer as a speaker. \n\n ### She's Tech \n\n She’s Tech has three pillars: inspire, engage, and empower. It works to raise market awareness about diversity and inclusion and encourages self-acceleration through leadership and protagonism. \n\n Moreover, it promotes various free online events where other women working in tech share what they’ve learned throughout their lives. This community also has a [Telegram group](https://t.me/shestech) to post and share job opportunities, events, and courses for women. \n\n ### Minas Programam \n\n [Minas Programam](http://minasprogramam.com/) was created to challenge the influence of gender and race stereotypes on women’s relationship with science, technology, and computing fields, according to its creators. \n\n It’s a project that provides learning opportunities about programming for girls and women (cis or trans) and non-binary people, especially those who are Black or Indigenous, through free courses, book tips, workshops, and support for future devs who don’t have a computer to start coding. \n\n ### Comunidades Tech \n\n [Comunidades Tech](https://comunidades.tech/) is an open-source project where you can search for various tech groups and filter by category, type, city, country, community name, and more. After choosing one to join, you just click to find entry links to the group, which may be on Discord, Facebook, Slack, Meetup, Telegram, WhatsApp, or even podcast. \n\n You can also create your own group and register it there so others can find it and your community grows. \n\n ## Conclusion \n\n Pretty cool, right? And you, do you already participate in communities? \n\n There are always new things in programming, and diving into communities is very important for your development as a dev. If you already participate, make the most of what it offers, help people, join conversations, attend meetings and talks. \n\n Remember, if you’re an Alura student, we have our own community on Discord where you can ask for help and assist many people. Everyone is always willing to give that amazing tip or find the reason for that error you just can’t fix. \n\n After all, nobody can do everything alone! If you’re not part of it yet, come and get amazed. \n\n I’ll leave [here the link](https://cursos.alura.com.br/extra/alura-mais/comunidade-no-discord-c1400) to João Manoel’s Alura+ about the Alura Discord community, where he shows how to join and explains how to use this app. If you’re not very familiar, I highly recommend watching it. \n\n Oh! And if you have more community tips, share them with us on our Discord channel — I’m sure everyone will love it. \n\n Now it’s your turn! Research communities and join the ones you like the most. \n\n"
      },
      
      {
        "id": 7,
        "titulo": "Reactive Forms with Angular",
        "texto": "> Source: <https://www.alura.com.br/artigos/como-aplicar-validacao-formularios-reativos-angular> \n\n  You have probably filled out a form that didn’t clearly indicate why a certain field was invalid and had to guess how many characters your password needed or what type of characters it should contain. Or, in a long form, you might have filled only the fields you thought were required and only at the end, when trying to submit, you faced numerous error messages showing that many other fields were mandatory? Annoying, right? Come learn how to improve this experience using Angular’s custom validations!\n\nIn this article, you will learn how to:\n\n\n\n- Create a reactive form;\n\n- Apply standard validations and create custom validations;\n\n- Show validation errors only when the field has been accessed;\n\n- Enable the submit button only when the form is valid.\n\n\n\nLet’s go?\n\n\n\nCreating forms is very common in front-end dev routines. Both in simpler forms and especially as the number of fields grows, it is necessary to implement validations. \n\n\n\nValidations are important to prevent registration errors and ensure the information filled is in the expected format, but it is necessary to clearly state all particularities of the fields to promote a more dynamic and friendly interaction of people with our application.\n\n\n\n## What are reactive forms?\n\n\n\nIn Angular, there are two different types of forms: *template-driven* and *data-driven*. Template-driven forms are created and configured in the `component.html`; validations are also included in the template and form values are submitted through the *ngSubmit* directive.\n\n\n\nData-driven forms (reactive forms) are created and configured in the `component.ts` and most of the code stays in that file and not in the HTML. This way, we have a cleaner template, only with the basic structure of the form, since all validations are done in the component. In the HTML, the template is linked to the component and we do not necessarily need *ngSubmit*.\n\n\n\nEasy to create and maintain, reactive forms are widely used due to their power and ability to react to changes that happen in the form, using [observables](https://www.alura.com.br/curso-online-angular-rxjs-introducao-programacao-reativa). \n\n\n\nNow we will understand how we can create a reactive form and apply validations in it. \n\n\n\n## What do we need to configure?\n\n\n\nWith the app created, we need to import the `ReactiveFormsModule` in the `app.module.ts` file and add it to the *imports* array of the `ngModule`, like this:\n\n\n\n```\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n\n  declarations: [\n\nAppComponent\n\n  ],\n\n  imports: [\n\nBrowserModule,\n\nAppRoutingModule,\n\nReactiveFormsModule\n\n  ],\n\n  providers: [],\n\n  bootstrap: [AppComponent]\n\n})\n\n\n\nexport class AppModule { }\n\n```\n\n\n\nIf you have doubts about this step, [see here how to start with Angular](https://www.alura.com.br/artigos/como-comecar-com-angular) and [how to create your first app](https://www.alura.com.br/artigos/criando-aplicacoes-angular-com-angular-cli).\n\n\n\nNow, let’s create in `app.component.ts` a variable called formulario of type **FormGroup** (which should also be imported), which is an Angular class that will help us implement and validate forms. Another important class that we will see later is **FormControl**.\n\n\n\n```\n\nimport { FormGroup } from '@angular/forms';\n\n\n\nformulario: FormGroup;\n\n```\n\n\n\nThe approach we will use to create our form is through dependency injection of the *service* **FormBuilder**. This service provides methods to generate form controls and avoids manual creation of control instances. For this, we will need to:  \n\n\n\n- Import the FormBuilder class;\n\n- Inject the FormBuilder service;\n\n- Generate the form content.\n\n\n\nLet’s create a form with 4 fields:\n\n\n\n- nome (name)\n\n- username\n\n- email\n\n- senha (password)\n\n\n\nOur `app.component.ts` will look like this:\n\n\n\n```\n\nimport { Component } from '@angular/core';\n\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n\n\n@Component({\n\n  selector: 'app-root',\n\n  templateUrl: './app.component.html',\n\n  styleUrls: ['./app.component.css']\n\n})\n\nexport class AppComponent {\n\n\n\n  formulario: FormGroup;\n\n\n\n  constructor(private formBuilder: FormBuilder) { }\n\n\n\n  ngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: [''],\n\nusername: [''],\n\nemail: [''],\n\nsenha: ['']\n\n});\n\n  }\n\n}\n\n```\n\n\n\nWe also need to create the form structure in the template with the four fields. Now, before implementing validations, let’s synchronize the form created in the component with the template to check if everything is correct.\n\n\n\nFor this, we can use a directive from `ReactiveFormsModule` called **formGroup**. And on the *form* tag in the HTML, we assign the directive to our variable *formulario* using property binding because every time the field changes, we want to update and assign the value to the form.\n\n\n\n```\n\n<form [formGroup]=\"formulario\"></form>\n\n```\n\n\n\nTo associate each input, we use another directive called **formControlName**, linking the HTML field to the component and passing exactly the names of the variables we created via the FormBuilder.\n\n\n\n```\n\n<input id=\"nome\" type=\"text\" formControlName=\"nome\" >\n\n<input id=\"username\" type=\"text\" formControlName=\"username\" >\n\n<input id=\"email\" type=\"email\" formControlName=\"email\" >\n\n<input id=\"senha\" type=\"password\" formControlName=\"senha\" >\n\n```\n\n\n\nOur form looks like this (styled with [Angular Material](https://material.angular.io/)). \n\n\n\n## Applying validations\n\n\n\nNow, let’s include the following validations in the app:\n\n\n\n- All fields are required;\n\n- The username field will accept only lowercase letters;\n\n- Validation for correct email format;\n\n- Minimum password length will be 6 characters.\n\n\n\nTo start, let’s import the **Validators** class:\n\n\n\n```\n\nimport { Validators } from '@angular/forms';\n\n```\n\n\n\nThis class already provides many ready-to-use and easy validation methods such as:\n\n\n\n- required() - required field;\n\n- maxLength() - maximum allowed characters;\n\n- minLength() - minimum allowed characters;\n\n- email() - validates email format;\n\n\n\n[See the full list of Validators methods here](https://angular.io/api/forms/Validators).\n\n\n\nNow let’s implement validations on the form, passing the validation methods as the second parameter of the array created in `component.ts`. \n\n\n\n```\n\nngOnInit(): void {\n\nthis.formulario = this.formBuilder.group({\n\nnome: ['', [Validators.required]],\n\nusername: ['',  [Validators.required]],\n\nemail: ['', [Validators.required, Validators.email]],\n\nsenha: ['', [Validators.required, Validators.minLength(6)]]\n\n});\n\n  }\n\n```\n\n\n\n## Displaying error messages\n\n\n\nTo show validation messages, let’s include in the HTML, below the input, a div with the *ngIf directive, checking the form’s errors for the field passed as parameter, and including the message we want to present:\n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors\">\n\nName is required\n\n</div>\n\n```\n\n\n\nWe replicate this for each field and check the result:\n\n\n\nOk, now the messages appear, but already on the initial load of the app. Is there a more user-friendly way to show them? Only when the field is accessed? Yes!! We can do this through a FormControl property called **touched**. Its initial value is *false* and every time the input fires the *onBlur* event — i.e., when the field is accessed and loses focus — the property becomes *true*.\n\n\n\nIn the example for the *nome* field, it will look like this: \n\n\n\n```\n\n<div *ngIf=\"formulario.get('nome')?.errors?.['required'] && formulario.get('nome')?.touched\">\n\nName is required\n\n</div>\n\n```\n\n\n\nReplicating this for the other fields, the error messages now appear only when necessary.\n\n\n\n## Creating custom validations\n\n\n\nThe validation we want to include for the username field to accept only lowercase letters is not present in the `Validators` class. But that’s not a problem, as it’s possible to create custom validations to suit your needs.\n\nIn our example, we create a file called `minusculoValidator.ts`, import the **AbstractControl** class and create the validation logic. \n\n\n\n`minusculoValidator.ts`:\n\n```\n\nimport { AbstractControl } from \"@angular/forms\";\n\n\n\nexport function minusculoValidator(control: AbstractControl) {\n\nconst username = control.value as string;\n\nif(username !== username?.toLowerCase()) {\n\nreturn { minusculo: true };\n\n} else\n\nreturn null;\n\n}\n\n```\n\n\n\nAfter that, we import the validation in the component and include it in the array together with the other validations.\n\n\n\n`app.component.ts`:\n\n```\n\nusername: ['',  [Validators.required, minusculoValidator]],\n\n```\n\n\n\n`app.component.html`:\n\n```\n\n<div *ngIf=\"formulario.get('username')?.errors?.['minusculo'] && formulario.get('username')?.touched\">\n\nThis field accepts only lowercase letters\n\n</div>\n\n```\n\n\n\nThus, through the *errors* property, we can create custom messages depending on the error triggered.\n\n\n\n## Disable/Enable the button\n\n\n\nAnother important point is that the submit button is enabled from the start, even if the fields are not filled out. Shall we fix this?\n\n\n\nThe form has a *valid* property and we can do a property binding assigning it to the button’s *disabled* property to create a logic so that the button is enabled only when the form is valid, i.e., when all fields are correctly filled.\n\n\n\n`app.component.html`:\n\n```\n\n<button [disabled]=\"!formulario.valid\">\n\nSign up\n\n</button>\n\n```\n\n\n\n"
      },
    
      {
        "id": 8,
        "titulo": "Svelte or React?",
        "texto": "> Source: <https://www.alura.com.br/artigos/svelte-versus-react-quais-diferencas>\n\nUndoubtedly, [React is the tool that **currently dominates the front-end market**](https://www.alura.com.br/formacao-react-ts), being the most used according to the [2020 State of JS survey](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/), followed by its competitors Angular and Vue.js. This demand is also noticeable when looking for job openings on employment platforms.\n\nHowever, a new tool has been gaining strength in recent years and surpassed all others in the same survey in terms of **satisfaction**: Svelte.\n\n## But what is Svelte?\n\n[Svelte](https://svelte.dev/) is a **compiler** used to build web interfaces, just like React, Angular, and Vue.js. It was created in 2016 by Rich Harris, and aims to be more performant, easy to learn and use, with a gentle learning curve, besides having a simple and intuitive syntax.\n\nSvelte itself is very lightweight: [4.4kB, or 1.6 kB compressed](https://bundlephobia.com/package/svelte@3.43.2), costing much less for browsers to download the files. For comparison, the [react](https://bundlephobia.com/package/react@17.0.2) and [react-dom](https://bundlephobia.com/package/react@17.0.2) packages combined total 126kB, or 42.2kB compressed.\n\n## How does a front-end compiler work?\n\nSvelte’s compiler reads the code we write and **compiles** it into pure JavaScript, [without using a Virtual DOM](https://svelte.dev/blog/virtual-dom-is-pure-overhead). The generated code is [extremely performant](https://krausest.github.io/js-framework-benchmark/2022/table_chrome_99.0.4844.51.html) compared to its competitors.\n\nYou can also see the compilation process in practice using the [REPL](https://svelte.dev/repl/hello-world), a tool created by Svelte where we can test our code online and see the generated JS files.\n\n> Tip: use the REPL to test the examples from this article!\n\nNow that you understand how Svelte works and how performant it is, let’s compare it with React, with some code examples!\n\n## Svelte vs React code comparison\n\n### Component structure\n\nConsider the following React code:\n\n```\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n  const [name, setName] = useState('World');\n\n  return (\n    <div className=\"App\">\n      <h1>Hello {name}!</h1>\n    </div>\n  );\n}\n\nexport default App;\n```\n\nWith Svelte, the same code would look like this:\n\n```\n<script>\n  let name = 'World';\n</script>\n\n<main>\n  <h1>Hello {name}!</h1>\n</main>\n\n<style>\n  main {\n    /* main styles */\n  }\n\n  h1 {\n    /* h1 styles */\n  }\n</style>\n```\n\nSvelte uses the **Single File Component** structure, where we put HTML, CSS, and JS in the same `.svelte` file. In the example above, JS is inside the `<script>` tag, CSS inside `<style>`, and HTML doesn’t need to be wrapped in a tag. Also, these parts can appear in any order, so the code below is also valid:\n\n```\n<style>\n  h1 {\n    /* h1 styles */\n  }\n</style>\n\n<h1>Hello {name}!</h1>\n<p>\n  My first Svelte app!\n</p>\n\n<script>\n  let name = 'World';\n</script>\n```\n\nNote that the component’s HTML doesn’t need to be wrapped in a single tag, like in the example above where we used `<h1>` and `<p>` tags.\n\n### State\n\nIn React, to create state, we need to explicitly declare it using `useState`. In Svelte, any variable declared with `let` automatically becomes state.\n\nAlso, in React, if we want to change the `name` state to a new value on a button click, we can write:\n\n```\n<button onClick={() => setName('Antônio')} disabled={name === 'Antônio'}>\n  Change name\n</button>\n```\n\nThe equivalent code in Svelte:\n\n```\n<button on:click={() => name = 'Antônio'} disabled={name === 'Antônio'}>\n  Change name\n</button>\n```\n\nNotice we use the [on:](https://svelte.dev/tutorial/dom-events) directive to listen for the button’s `click` event. Also, we simply assign directly to the `name` state, and the component interface re-renders automatically. This is an intuitive and practical syntax, especially when working with objects and arrays.\n\n> Directives are like “special attributes” that we put on HTML tags. They’re known from Angular and Vue.js, and are powerful tools that help us in many ways during development.\n\n### Two-way data binding\n\nLet’s create an input that updates the `name` state created in the React code, using the `setName` function:\n\n```\n<input\n  type=\"text\"\n  value={name}\n  onChange={(e) => setName(e.target.value)}\n/>\n```\n\nNote we need to declare `value={name}` for the input’s initial value, and also declare `onChange={(e) => setName(e.target.value)}` so changes update the state.\n\nIn Svelte, we can simplify this with:\n\n```\n<input type=\"text\" bind:value={name} />\n```\n\nWe use the [bind:](https://svelte.dev/tutorial/text-inputs) directive for **two-way data binding**, which binds an HTML attribute to state. So the `value` attribute and the `name` state always have the same value.\n\n### Scoped styles\n\nIn React, styles are not scoped by default, so if CSS files define styles for the same selector, they interfere with each other. Possible solutions include CSS modules or Styled Components.\n\nIn Svelte, styles are [**scoped by default**](https://svelte.dev/docs#component-format-style), which is usually the desired behavior. If you need a global style for all components, you can write:\n\n```\n:global(h1) {\n  /* h1 styles */\n}\n```\n\nWe use the `:global()` modifier and put the CSS selector inside parentheses.\n\n### Conditional structure\n\nIn React, we combine JS with JSX for conditional rendering like this:\n\n```\n{\n  name === 'Antônio'\n    ? <p>That’s my name!</p>\n    : <p>Not my name...</p>\n}\n```\n\nIn Svelte, there is a dedicated structure for this, written as:\n\n```\n{#if name === 'Antônio'}\n  <p>That’s my name!</p>\n{:else}\n  <p>Not my name...</p>\n{/if}\n```\n\nThis is the Svelte [#if](https://svelte.dev/tutorial/if-blocks) block, which can optionally include `:else if` and `:else` clauses.\n\n### Loop structure\n\nIn React, we combine JS with JSX to iterate over a list and render HTML accordingly. Suppose we have a `numbers` state array. To print a paragraph for each item:\n\n```\n{numbers.map((number) => (\n  <p>Number: {number}</p>\n))}\n```\n\nIn Svelte, we have a dedicated structure for this:\n\n```\n{#each numbers as number}\n  <p>Number: {number}</p>\n{/each}\n```\n\nThis is the Svelte [#each](https://svelte.dev/tutorial/else-blocks) block, which can be used with an optional `:else` clause that shows HTML if the list is empty.\n\n> Note these special blocks start with `#`, continue with `:` (when there are clauses), and end with `/`.\n\n### Reactive code\n\nSometimes, it’s useful to keep values dependent on component state. In React, right after declaring `name` state, we could add:\n\n```\nconst isMyName = name === 'Antônio';\n```\n\nThen use `isMyName` in the button and conditional:\n\n```\n<button onClick={() => setName('Antônio')} disabled={isMyName}>\n  Change name\n</button>\n\n{\n  isMyName\n    ? <p>That’s my name!</p>\n    : <p>Not my name...</p>\n}\n```\n\nThis avoids code repetition and improves readability and maintainability. However, `const isMyName = name === 'Antônio';` runs on every re-render, even if caused by unrelated state.\n\nIn Svelte, all code inside `<script>` runs once when the component first renders. To replicate the above, we write:\n\n```\n$: isMyName = name === 'Antônio';\n```\n\nThen in HTML, we use `isMyName`:\n\n```\n<button on:click={() => name = 'Antônio'} disabled={isMyName}>\n  Change name\n</button>\n\n{#if isMyName}\n  <p>That’s my name!</p>\n{:else}\n  <p>Not my name...</p>\n{/if}\n```\n\nThe [$:](https://svelte.dev/tutorial/reactive-statements) syntax marks reactive statements! Svelte tracks the states used and runs this code only when those states change. So `isMyName = name === 'Antônio'` runs only when `name` changes.\n\n> If you’ve worked with Vue.js, you might remember *computed properties*. The “dollar syntax” works pretty much the same way.\n\n### And there’s more...\n\nWe covered fundamental concept comparisons between Svelte and React, but it would take many articles to cover more important differences! Some of them:\n\n- **Component communication**: In React, basic communication is unidirectional, from parent to child, via props. Svelte offers various options, like props, [dispatch](https://svelte.dev/tutorial/component-events) (child to parent), and [bind](https://svelte.dev/tutorial/component-bindings) (bidirectional communication).\n\n- **Component composition**: In React, we use `children` to pass complex content to a child component. In Svelte, we use [`slot`](https://svelte.dev/tutorial/slots), which supports features like default content (*fallback*), multiple contents (*named slots*), and more.\n\n- **Lifecycle methods**: React’s functional approach unifies lifecycle controls in the `useEffect()` hook. Svelte separates them into [different methods](https://svelte.dev/tutorial/onmount): `onMount()`, `beforeUpdate()`, `afterUpdate()`, and `onDestroy()`. You can also return a function from `onMount()` to run on component destruction, similar to `onDestroy()`.\n\n- **State management**: React offers native Context API or external libraries like Redux. Svelte has two native solutions: [Stores](https://svelte.dev/tutorial/writable-stores) for global state and a [Context API](https://svelte.dev/tutorial/context-api) for more specific cases.\n\n## So, is Svelte better than React?\n\nDespite the benefits, Svelte is still an **emerging technology**, with fewer job opportunities than competitors.\n\nHowever, it’s already used by companies like Spotify, The New York Times, Avast, Philips, and others, as shown on the [Svelte homepage](https://svelte.dev/) and [this Wappalyzer page](https://www.wappalyzer.com/technologies/javascript-frameworks/svelte) that analyzes which sites use specific technologies.\n\nReact still leads the market, especially for large applications and teams. Its ecosystem is more mature and comprehensive, with great community support.\n\nIn summary: Svelte is a **more modern and efficient technology** that simplifies front-end development with an excellent developer experience. React remains **an industry standard**, with massive adoption and a rich ecosystem.\n\nWhy not try both and decide which fits your projects best?\n\n> If you liked this article, I recommend the [free Svelte course](https://www.alura.com.br/curso-online-svelte) by Alura!\n\n## References\n\n- Alura article: [https://www.alura.com.br/artigos/svelte-versus-react-quais-diferencas](https://www.alura.com.br/artigos/svelte-versus-react-quais-diferencas)\n- Official Svelte tutorial: [https://svelte.dev/tutorial](https://svelte.dev/tutorial)\n- Svelte REPL: [https://svelte.dev/repl](https://svelte.dev/repl)\n- React docs: [https://reactjs.org/docs/getting-started.html](https://reactjs.org/docs/getting-started.html)\n- Bundlephobia: [https://bundlephobia.com](https://bundlephobia.com)\n- State of JS survey 2020: [https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/)\n- Krausest benchmarks: [https://krausest.github.io/js-framework-benchmark/2022/table_chrome_99.0.4844.51.html](https://krausest.github.io/js-framework-benchmark/2022/table_chrome_99.0.4844.51.html)\n"
      }
]